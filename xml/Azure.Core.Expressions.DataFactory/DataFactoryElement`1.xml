<Type Name="DataFactoryElement&lt;T&gt;" FullName="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;">
  <TypeSignature Language="C#" Value="public sealed class DataFactoryElement&lt;T&gt;" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataFactoryElement`1&lt;T&gt; extends System.Object" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="DocId" Value="T:Azure.Core.Expressions.DataFactory.DataFactoryElement`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataFactoryElement(Of T)" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="F#" Value="type DataFactoryElement&lt;'T&gt; = class" FrameworkAlternate="azure-dotnet" />
  <TypeSignature Language="C#" Value="public sealed class DataFactoryElement&lt;T&gt; : System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;, System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit DataFactoryElement`1&lt;T&gt; extends System.Object implements class System.ClientModel.Primitives.IJsonModel`1&lt;class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;!T&gt;&gt;, class System.ClientModel.Primitives.IPersistableModel`1&lt;class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;!T&gt;&gt;" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class DataFactoryElement(Of T)&#xA;Implements IJsonModel(Of DataFactoryElement(Of T)), IPersistableModel(Of DataFactoryElement(Of T))" FrameworkAlternate="azure-dotnet-preview" />
  <TypeSignature Language="F#" Value="type DataFactoryElement&lt;'T&gt; = class&#xA;    interface IJsonModel&lt;DataFactoryElement&lt;'T&gt;&gt;&#xA;    interface IPersistableModel&lt;DataFactoryElement&lt;'T&gt;&gt;" FrameworkAlternate="azure-dotnet-preview" />
  <AssemblyInfo>
    <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface FrameworkAlternate="azure-dotnet-preview">
      <InterfaceName>System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="azure-dotnet-preview">
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;</InterfaceName>
    </Interface>
    <Interface FrameworkAlternate="azure-dotnet-preview">
      <InterfaceName>System.ClientModel.Primitives.IPersistableModel&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[System.Text.Json.Serialization.JsonConverter(typeof(Azure.Core.Expressions.DataFactory.DataFactoryElementJsonConverter))]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Text.Json.Serialization.JsonConverter(typeof(Azure.Core.Expressions.DataFactory.DataFactoryElementJsonConverter))&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T"> Can be one of <see cref="T:System.String" />, <see cref="T:System.Boolean" />, <see cref="T:System.Int32" />, <see cref="T:System.Double" />, <see cref="T:System.TimeSpan" />,
            <see cref="T:System.DateTimeOffset" />, <see cref="T:System.Uri" />, <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:System.Collections.Generic.IList`1" /> where TElement has a <see cref="T:System.Text.Json.Serialization.JsonConverter" /> defined,
            or <see cref="T:System.Collections.Generic.IDictionary`2" />.</typeparam>
    <summary>
            A class representing either a literal value, a masked literal value (also known as a SecureString), an expression, or a Key Vault reference.
            For details on DataFactoryExpressions see https://learn.microsoft.com/en-us/azure/data-factory/control-flow-expression-language-functions#expressions.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object? obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="dataFactoryElement.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">The object to compare with the current object.</param>
        <summary>Determines whether the specified object is equal to the current object.</summary>
        <returns>
          <see langword="true" /> if the specified object  is equal to the current object; otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromExpression">
      <MemberSignature Language="C#" Value="public static Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt; FromExpression (string expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;!T&gt; FromExpression(string expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.FromExpression(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromExpression (expression As String) As DataFactoryElement(Of T)" />
      <MemberSignature Language="F#" Value="static member FromExpression : string -&gt; Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;" Usage="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;.FromExpression expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression"> The expression value. </param>
        <summary>
            Creates a new instance of <see cref="T:Azure.Core.Expressions.DataFactory.DataFactoryElement`1" /> using the expression value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromKeyVaultSecret">
      <MemberSignature Language="C#" Value="public static Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string?&gt; FromKeyVaultSecret (Azure.Core.Expressions.DataFactory.DataFactoryKeyVaultSecret secret);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;string&gt; FromKeyVaultSecret(class Azure.Core.Expressions.DataFactory.DataFactoryKeyVaultSecret secret) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.FromKeyVaultSecret(Azure.Core.Expressions.DataFactory.DataFactoryKeyVaultSecret)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromKeyVaultSecret (secret As DataFactoryKeyVaultSecret) As DataFactoryElement(Of String)" />
      <MemberSignature Language="F#" Value="static member FromKeyVaultSecret : Azure.Core.Expressions.DataFactory.DataFactoryKeyVaultSecret -&gt; Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt;" Usage="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;.FromKeyVaultSecret secret" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secret" Type="Azure.Core.Expressions.DataFactory.DataFactoryKeyVaultSecret" />
      </Parameters>
      <Docs>
        <param name="secret"> The key vault secret reference value. </param>
        <summary>
            Creates a new instance of <see cref="T:Azure.Core.Expressions.DataFactory.DataFactoryElement`1" /> using the KeyVaultSecretReference value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromLiteral">
      <MemberSignature Language="C#" Value="public static Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt; FromLiteral (T? literal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;!T&gt; FromLiteral(!T literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.FromLiteral(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromLiteral (literal As T) As DataFactoryElement(Of T)" />
      <MemberSignature Language="F#" Value="static member FromLiteral : 'T -&gt; Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;" Usage="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;.FromLiteral literal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="T" />
      </Parameters>
      <Docs>
        <param name="literal">The literal value.</param>
        <summary>
            Creates a new instance of <see cref="T:Azure.Core.Expressions.DataFactory.DataFactoryElement`1" /> using the literal value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromSecretString">
      <MemberSignature Language="C#" Value="public static Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string?&gt; FromSecretString (Azure.Core.Expressions.DataFactory.DataFactorySecretString secretString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;string&gt; FromSecretString(class Azure.Core.Expressions.DataFactory.DataFactorySecretString secretString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.FromSecretString(Azure.Core.Expressions.DataFactory.DataFactorySecretString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSecretString (secretString As DataFactorySecretString) As DataFactoryElement(Of String)" />
      <MemberSignature Language="F#" Value="static member FromSecretString : Azure.Core.Expressions.DataFactory.DataFactorySecretString -&gt; Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;string&gt;" Usage="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;.FromSecretString secretString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="secretString" Type="Azure.Core.Expressions.DataFactory.DataFactorySecretString" />
      </Parameters>
      <Docs>
        <param name="secretString"> The unmasked string value. </param>
        <summary>
            Creates a new instance of <see cref="T:Azure.Core.Expressions.DataFactory.DataFactoryElement`1" /> using the KeyVaultSecretReference value.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="dataFactoryElement.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Serves as the default hash function.</summary>
        <returns>A hash code for the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kind">
      <MemberSignature Language="C#" Value="public Azure.Core.Expressions.DataFactory.DataFactoryElementKind Kind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Azure.Core.Expressions.DataFactory.DataFactoryElementKind Kind" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.Kind" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Kind As DataFactoryElementKind" />
      <MemberSignature Language="F#" Value="member this.Kind : Azure.Core.Expressions.DataFactory.DataFactoryElementKind" Usage="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;.Kind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElementKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the kind of the element.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Literal">
      <MemberSignature Language="C#" Value="public T? Literal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Literal" />
      <MemberSignature Language="DocId" Value="P:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.Literal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Literal As T" />
      <MemberSignature Language="F#" Value="member this.Literal : 'T" Usage="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;.Literal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the literal value if the element has a <see cref="P:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.Kind" /> of <see cref="P:Azure.Core.Expressions.DataFactory.DataFactoryElementKind.Literal" />.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.Kind" /> is not <see cref="P:Azure.Core.Expressions.DataFactory.DataFactoryElementKind.Literal" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static implicit operator Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt; (T literal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;!T&gt; op_Implicit(!T literal) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.op_Implicit(`0)~Azure.Core.Expressions.DataFactory.DataFactoryElement{`0}" />
      <MemberSignature Language="VB.NET" Value="Public Shared Widening Operator CType (literal As T) As DataFactoryElement(Of T)" />
      <MemberSignature Language="F#" Value="static member op_Implicit : 'T -&gt; Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;" Usage="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;.op_Implicit literal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="literal" Type="T" />
      </Parameters>
      <Docs>
        <param name="literal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt; IJsonModel&lt;DataFactoryElement&lt;T&gt;&gt;.Create (ref System.Text.Json.Utf8JsonReader reader, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;!T&gt; System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create(valuetype System.Text.Json.Utf8JsonReader&amp; reader, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.System#ClientModel#Primitives#IJsonModel&lt;Azure#Core#Expressions#DataFactory#DataFactoryElement&lt;T&gt;&gt;#Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (ByRef reader As Utf8JsonReader, options As ModelReaderWriterOptions) As DataFactoryElement(Of T) Implements IJsonModel(Of DataFactoryElement(Of T)).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create : Utf8JsonReader * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;" Usage="dataFactoryElement.System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create (reader, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Create(System.Text.Json.Utf8JsonReader@,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Text.Json.Utf8JsonReader" RefType="ref" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="reader">The <see cref="T:System.Text.Json.Utf8JsonReader" /> to read.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Reads one JSON value (including objects or arrays) from the provided reader and converts it to a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the JSON value.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write">
      <MemberSignature Language="C#" Value="void IJsonModel&lt;DataFactoryElement&lt;T&gt;&gt;.Write (System.Text.Json.Utf8JsonWriter writer, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write(class System.Text.Json.Utf8JsonWriter writer, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.System#ClientModel#Primitives#IJsonModel&lt;Azure#Core#Expressions#DataFactory#DataFactoryElement&lt;T&gt;&gt;#Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Sub Write (writer As Utf8JsonWriter, options As ModelReaderWriterOptions) Implements IJsonModel(Of DataFactoryElement(Of T)).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit&#xA;override this.System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write : System.Text.Json.Utf8JsonWriter * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; unit" Usage="dataFactoryElement.System.ClientModel.Primitives.IJsonModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write (writer, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IJsonModel`1.Write(System.Text.Json.Utf8JsonWriter,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.Text.Json.Utf8JsonWriter" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="writer">The <see cref="T:System.Text.Json.Utf8JsonWriter" /> to write into.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model to the provided <see cref="T:System.Text.Json.Utf8JsonWriter" />.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create">
      <MemberSignature Language="C#" Value="Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt; IPersistableModel&lt;DataFactoryElement&lt;T&gt;&gt;.Create (BinaryData data, System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class Azure.Core.Expressions.DataFactory.DataFactoryElement`1&lt;!T&gt; System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create(class System.BinaryData data, class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.System#ClientModel#Primitives#IPersistableModel&lt;Azure#Core#Expressions#DataFactory#DataFactoryElement&lt;T&gt;&gt;#Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Create (data As BinaryData, options As ModelReaderWriterOptions) As DataFactoryElement(Of T) Implements IPersistableModel(Of DataFactoryElement(Of T)).Create" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create : BinaryData * System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;'T&gt;" Usage="dataFactoryElement.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Create (data, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Create(System.BinaryData,System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.BinaryData" Index="0" FrameworkAlternate="azure-dotnet-preview" />
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="1" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="T:System.BinaryData" /> to parse.</param>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Converts the provided <see cref="T:System.BinaryData" /> into a model.
            </summary>
        <returns>A <typeparamref name="T" /> representation of the data.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.GetFormatFromOptions">
      <MemberSignature Language="C#" Value="string IPersistableModel&lt;DataFactoryElement&lt;T&gt;&gt;.GetFormatFromOptions (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.GetFormatFromOptions(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.System#ClientModel#Primitives#IPersistableModel&lt;Azure#Core#Expressions#DataFactory#DataFactoryElement&lt;T&gt;&gt;#GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function GetFormatFromOptions (options As ModelReaderWriterOptions) As String Implements IPersistableModel(Of DataFactoryElement(Of T)).GetFormatFromOptions" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.GetFormatFromOptions : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; string" Usage="dataFactoryElement.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.GetFormatFromOptions options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.GetFormatFromOptions(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to consider when serializing and deserializing the model.</param>
        <summary>
            Gets the data interchange format (JSON, Xml, etc) that the model uses when communicating with the service.
            </summary>
        <returns>The format that the model uses when communicating with the service.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write">
      <MemberSignature Language="C#" Value="BinaryData IPersistableModel&lt;DataFactoryElement&lt;T&gt;&gt;.Write (System.ClientModel.Primitives.ModelReaderWriterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.BinaryData System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write(class System.ClientModel.Primitives.ModelReaderWriterOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.System#ClientModel#Primitives#IPersistableModel&lt;Azure#Core#Expressions#DataFactory#DataFactoryElement&lt;T&gt;&gt;#Write(System.ClientModel.Primitives.ModelReaderWriterOptions)" />
      <MemberSignature Language="VB.NET" Value="Function Write (options As ModelReaderWriterOptions) As BinaryData Implements IPersistableModel(Of DataFactoryElement(Of T)).Write" />
      <MemberSignature Language="F#" Value="abstract member System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData&#xA;override this.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write : System.ClientModel.Primitives.ModelReaderWriterOptions -&gt; BinaryData" Usage="dataFactoryElement.System.ClientModel.Primitives.IPersistableModel&lt;Azure.Core.Expressions.DataFactory.DataFactoryElement&lt;T&gt;&gt;.Write options" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ClientModel.Primitives.IPersistableModel`1.Write(System.ClientModel.Primitives.ModelReaderWriterOptions)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.BinaryData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.ClientModel.Primitives.ModelReaderWriterOptions" Index="0" FrameworkAlternate="azure-dotnet-preview" />
      </Parameters>
      <Docs>
        <param name="options">The <see cref="T:System.ClientModel.Primitives.ModelReaderWriterOptions" /> to use.</param>
        <summary>
            Writes the model into a <see cref="T:System.BinaryData" />.
            </summary>
        <returns>A binary representation of the written model.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.FormatException">If the model does not support the requested <see cref="P:System.ClientModel.Primitives.ModelReaderWriterOptions.Format" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string? ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Core.Expressions.DataFactory.DataFactoryElement`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="dataFactoryElement.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Core.Expressions.DataFactory</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string that represents the current object.</summary>
        <returns>A string that represents the current object.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
