<Type Name="MockableApiCenterArmClient" FullName="Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient">
  <TypeSignature Language="C#" Value="public class MockableApiCenterArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableApiCenterArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableApiCenterArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableApiCenterArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableApiCenterArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApiCenterApiDefinitionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ApiCenter.ApiCenterApiDefinitionResource GetApiCenterApiDefinitionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ApiCenter.ApiCenterApiDefinitionResource GetApiCenterApiDefinitionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient.GetApiCenterApiDefinitionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApiCenterApiDefinitionResource (id As ResourceIdentifier) As ApiCenterApiDefinitionResource" />
      <MemberSignature Language="F#" Value="abstract member GetApiCenterApiDefinitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterApiDefinitionResource&#xA;override this.GetApiCenterApiDefinitionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterApiDefinitionResource" Usage="mockableApiCenterArmClient.GetApiCenterApiDefinitionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ApiCenter.ApiCenterApiDefinitionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterApiDefinitionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ApiCenter.ApiCenterApiDefinitionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterApiDefinitionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterApiDefinitionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApiCenterApiResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ApiCenter.ApiCenterApiResource GetApiCenterApiResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ApiCenter.ApiCenterApiResource GetApiCenterApiResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient.GetApiCenterApiResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApiCenterApiResource (id As ResourceIdentifier) As ApiCenterApiResource" />
      <MemberSignature Language="F#" Value="abstract member GetApiCenterApiResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterApiResource&#xA;override this.GetApiCenterApiResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterApiResource" Usage="mockableApiCenterArmClient.GetApiCenterApiResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ApiCenter.ApiCenterApiResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterApiResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ApiCenter.ApiCenterApiResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterApiResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterApiResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApiCenterApiVersionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ApiCenter.ApiCenterApiVersionResource GetApiCenterApiVersionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ApiCenter.ApiCenterApiVersionResource GetApiCenterApiVersionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient.GetApiCenterApiVersionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApiCenterApiVersionResource (id As ResourceIdentifier) As ApiCenterApiVersionResource" />
      <MemberSignature Language="F#" Value="abstract member GetApiCenterApiVersionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterApiVersionResource&#xA;override this.GetApiCenterApiVersionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterApiVersionResource" Usage="mockableApiCenterArmClient.GetApiCenterApiVersionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ApiCenter.ApiCenterApiVersionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterApiVersionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ApiCenter.ApiCenterApiVersionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterApiVersionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterApiVersionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApiCenterDeploymentResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ApiCenter.ApiCenterDeploymentResource GetApiCenterDeploymentResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ApiCenter.ApiCenterDeploymentResource GetApiCenterDeploymentResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient.GetApiCenterDeploymentResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApiCenterDeploymentResource (id As ResourceIdentifier) As ApiCenterDeploymentResource" />
      <MemberSignature Language="F#" Value="abstract member GetApiCenterDeploymentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterDeploymentResource&#xA;override this.GetApiCenterDeploymentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterDeploymentResource" Usage="mockableApiCenterArmClient.GetApiCenterDeploymentResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ApiCenter.ApiCenterDeploymentResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterDeploymentResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ApiCenter.ApiCenterDeploymentResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterDeploymentResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterDeploymentResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApiCenterEnvironmentResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ApiCenter.ApiCenterEnvironmentResource GetApiCenterEnvironmentResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ApiCenter.ApiCenterEnvironmentResource GetApiCenterEnvironmentResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient.GetApiCenterEnvironmentResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApiCenterEnvironmentResource (id As ResourceIdentifier) As ApiCenterEnvironmentResource" />
      <MemberSignature Language="F#" Value="abstract member GetApiCenterEnvironmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterEnvironmentResource&#xA;override this.GetApiCenterEnvironmentResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterEnvironmentResource" Usage="mockableApiCenterArmClient.GetApiCenterEnvironmentResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ApiCenter.ApiCenterEnvironmentResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterEnvironmentResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ApiCenter.ApiCenterEnvironmentResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterEnvironmentResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterEnvironmentResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApiCenterMetadataSchemaResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ApiCenter.ApiCenterMetadataSchemaResource GetApiCenterMetadataSchemaResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ApiCenter.ApiCenterMetadataSchemaResource GetApiCenterMetadataSchemaResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient.GetApiCenterMetadataSchemaResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApiCenterMetadataSchemaResource (id As ResourceIdentifier) As ApiCenterMetadataSchemaResource" />
      <MemberSignature Language="F#" Value="abstract member GetApiCenterMetadataSchemaResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterMetadataSchemaResource&#xA;override this.GetApiCenterMetadataSchemaResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterMetadataSchemaResource" Usage="mockableApiCenterArmClient.GetApiCenterMetadataSchemaResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ApiCenter.ApiCenterMetadataSchemaResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterMetadataSchemaResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ApiCenter.ApiCenterMetadataSchemaResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterMetadataSchemaResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterMetadataSchemaResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApiCenterServiceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ApiCenter.ApiCenterServiceResource GetApiCenterServiceResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ApiCenter.ApiCenterServiceResource GetApiCenterServiceResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient.GetApiCenterServiceResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApiCenterServiceResource (id As ResourceIdentifier) As ApiCenterServiceResource" />
      <MemberSignature Language="F#" Value="abstract member GetApiCenterServiceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterServiceResource&#xA;override this.GetApiCenterServiceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterServiceResource" Usage="mockableApiCenterArmClient.GetApiCenterServiceResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ApiCenter.ApiCenterServiceResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterServiceResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ApiCenter.ApiCenterServiceResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterServiceResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterServiceResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApiCenterWorkspaceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.ApiCenter.ApiCenterWorkspaceResource GetApiCenterWorkspaceResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.ApiCenter.ApiCenterWorkspaceResource GetApiCenterWorkspaceResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.ApiCenter.Mocking.MockableApiCenterArmClient.GetApiCenterWorkspaceResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetApiCenterWorkspaceResource (id As ResourceIdentifier) As ApiCenterWorkspaceResource" />
      <MemberSignature Language="F#" Value="abstract member GetApiCenterWorkspaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterWorkspaceResource&#xA;override this.GetApiCenterWorkspaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.ApiCenter.ApiCenterWorkspaceResource" Usage="mockableApiCenterArmClient.GetApiCenterWorkspaceResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.ApiCenter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.ApiCenter.ApiCenterWorkspaceResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" Index="0" FrameworkAlternate="azure-dotnet" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterWorkspaceResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.ApiCenter.ApiCenterWorkspaceResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterWorkspaceResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.ApiCenter.ApiCenterWorkspaceResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
